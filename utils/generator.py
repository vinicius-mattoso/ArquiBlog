import os
import json
from datetime import datetime
from dotenv import load_dotenv
from langchain_openai import OpenAI

load_dotenv()

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY n√£o definida no .env")

llm = OpenAI(
    temperature=0.7,
    model="gpt-3.5-turbo-instruct",
    openai_api_key=OPENAI_API_KEY
)

def montar_prompt(frases):
    frases_formatadas = "\n".join([f"- {f}" for f in frases if f])
    prompt = f"""
Voc√™ √© um redator especialista em arquitetura, escrevendo para o blog do escrit√≥rio Pistache Arquitetura. Seu estilo √© emocional, leve, envolvente, com vocabul√°rio acess√≠vel e t√©cnico na medida certa. Escreva como se estivesse conversando com o leitor, transmitindo sensa√ß√µes, mem√≥rias e experi√™ncias ligadas aos ambientes.

Objetivo: Criar um post de blog encantador, que conte a hist√≥ria do projeto de forma fluida, conectando o espa√ßo √† vida de quem o habita.

Diretrizes:
- Comece com um t√≠tulo criativo e sens√≠vel (em destaque)
- Introduza o projeto com emo√ß√£o, falando da proposta, do uso do espa√ßo e da experi√™ncia desejada
- Siga com a descri√ß√£o t√©cnica (materiais, texturas, layout, m√≥veis, ilumina√ß√£o) de forma leve e envolvente
- Termine com uma reflex√£o inspiradora e um call to action sutil (ex: ‚Äúqual pe√ßa da sua casa traz as melhores lembran√ßas?‚Äù)
- O tom deve ser gentil, visual, sensorial ‚Äî evite parecer publicit√°rio ou formal demais
- Nunca mencione o nome do arquivo de imagem
- Use emojis pontualmente, como j√° usado nas redes do escrit√≥rio (ex: ‚ú®, üíõ,üíö,ü§ç, üè°)
- Finalize com hashtags alinhadas ao conte√∫do
- As ultimas 100 palavras deve ser as hashtags

Fontes de refer√™ncia de estilo e tom:
- @pistachearquitetura no Instagram
- Exemplo de tom: ‚ÄúCada detalhe conta uma hist√≥ria e reflete a ess√™ncia do lar. üíõ‚Äù
- Exemplo de frase t√©cnica leve: ‚ÄúA base neutra, com materiais naturais, cria um ambiente atemporal e acolhedor...‚Äù
- Exemplo de linguagem emocional: ‚ÄúTransformar mem√≥rias em design: esse foi o ponto de partida‚Ä¶‚Äù

Informa√ß√µes fornecidas para esse post:
{frases_formatadas}

Requisitos t√©cnicos:
- O texto deve ter entre 800 e 1000 palavras
- N√£o utilize intert√≠tulos vis√≠veis
- O conte√∫do deve estar pronto para ser publicado, sem necessidade de ajustes

Capriche na coes√£o e na est√©tica do texto, como se estivesse escrevendo diretamente para os seguidores do Instagram que agora chegaram ao blog.
"""
    return prompt


def gerar_post(frases, imagem_nome):
    frases_formatadas = "\n".join([f"- {f}" for f in frases if f])
#     prompt = f"""
# Voc√™ √© um redator especializado em arquitetura. Com base nas informa√ß√µes abaixo, escreva um post de blog com estilo fluido, cont√≠nuo e bem redigido, pronto para ser publicado em um site.

# Formato desejado:
# - Um t√≠tulo criativo no topo
# - Introdu√ß√£o com apelo emocional e contexto do projeto
# - Se√ß√£o t√©cnica (materiais, estilo, decis√µes projetuais)
# - Encerramento com tom inspirador e com um call to action para entrar em contato para saber mais sobre esses e outros projetos
# - Sem intert√≠tulos vis√≠veis
# - N√£o cite o nome da imagem em nenhum momento
# - N√£o esque√ßa de colocar as hastags

# Informa√ß√µes fornecidas:
# {frases_formatadas}

# O texto deve ter entre 800 e 1000 palavras, bem coeso, com vocabul√°rio acess√≠vel e envolvente.
# """
    if not frases or not any(frases):
        raise ValueError("Frases fornecidas est√£o vazias.")
    
    prompt = montar_prompt(frases)

    # Gera o texto
    # texto = llm(prompt)
    texto = llm.invoke(prompt)

    # Salvar o texto
    agora = datetime.now()
    timestamp = agora.strftime("%Y-%m-%d_%H-%M-%S")
    nome_arquivo = f"post_{timestamp}.txt"
    caminho_arquivo = os.path.join("posts", nome_arquivo)

    os.makedirs("posts", exist_ok=True)
    with open(caminho_arquivo, "w", encoding="utf-8") as f:
        f.write(texto)

    # Registrar no hist√≥rico
    historico_path = os.path.join("posts", "historico.json")
    novo_registro = {
        "data_hora": agora.strftime("%d/%m/%Y %H:%M:%S"),
        "frases": frases,
        "imagem": imagem_nome,
        "arquivo_txt": caminho_arquivo
    }

    historico = []
    if os.path.exists(historico_path):
        with open(historico_path, "r", encoding="utf-8") as f:
            historico = json.load(f)

    historico.append(novo_registro)
    with open(historico_path, "w", encoding="utf-8") as f:
        json.dump(historico, f, ensure_ascii=False, indent=4)

    return texto
